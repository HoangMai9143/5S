@using DC.Models
@inject AppDbContext appDbContext
@inject ISnackbar sb

@rendermode InteractiveServer

<style>
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
    z-index: 1;
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background: #c4c4c4;
    border-radius: 1px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #a6a6a6;
  }

  html,
  body * {
    scrollbar-color: #c4c4c4 transparent;
    scrollbar-width: none;
    overflow-y: hidden !important;
  }
</style>

<MudDialog>
  <DialogContent>
    <MudStack>
      <MudTextField Required @bind-Value="_title" Label="Title" FullWidth="true" />
    </MudStack>
    <MudStack>
      <MudDateRangePicker @bind-DateRange="_dateRange" Margin="Margin.Dense" PlaceholderStart="Start Date" PlaceholderEnd="End Date" MinDate="@DateTime.Today.AddYears(-1)" MaxDate="@DateTime.Today.AddYears(1)" />
      <MudSwitch Style="padding-left: 15px;" @bind-Value="_isActive" Color="Color.Success" UncheckedColor="Color.Error">Is Active</MudSwitch>
    </MudStack>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Cancel">Cancel</MudButton>
    <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
  </DialogActions>
</MudDialog>

@code {
  [CascadingParameter] MudDialogInstance MudDialog { get; set; }
  [Parameter] public SurveyModel Survey { get; set; }

  private string _title;
  private DateRange _dateRange;
  private bool _isActive;

  protected override void OnInitialized()
  {
    _title = Survey.Title;
    _dateRange = new DateRange(Survey.StartDate, Survey.EndDate);
    _isActive = Survey.IsActive;
  }

  private void Cancel()
  {
    MudDialog.Cancel();
  }

  private async Task Submit()
  {
    if (_dateRange.Start.HasValue && _dateRange.End.HasValue)
    {
      if (_dateRange.Start.Value > _dateRange.End.Value)
      {
        sb.Add("End date must be after start date", Severity.Error);
        return;
      }

      Survey.Title = _title;
      Survey.StartDate = _dateRange.Start.Value;
      Survey.EndDate = _dateRange.End.Value;
      Survey.IsActive = _isActive;

      if (Survey.EndDate < DateTime.Today)
      {
        Survey.IsActive = false;
      }
      if (string.IsNullOrEmpty(_title))
      {
        sb.Add("Title can't be empty", Severity.Warning);
        return;
      }
      try
      {
        appDbContext.Set<SurveyModel>().Update(Survey);
        await appDbContext.SaveChangesAsync();
        MudDialog.Close(DialogResult.Ok(true));
      }
      catch (Exception ex)
      {
        sb.Add($"Error updating survey: {ex.Message}", Severity.Error);
      }
    }
    else
    {
      sb.Add("Please select both start and end dates", Severity.Warning);
    }
  }
}